{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38068\\\\Desktop\\\\HTML-CSS-77\\\\WeatherT\\\\src\\\\components\\\\weatherCard\\\\weatherCard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { getWeather } from '../api/api';\n// import SearchBar from '../searchBar/searchbar';\n// import GoogleMaps from '../map/map';\n// import wcss from './weatherCard.module.css';\n// import Forecast from '../forecast/forecast';\n// import { useTranslation } from 'react-i18next';\n// import { getWeatherGeo, getCurrentLocation } from '../api/apiGeo';\n\n// const WeatherCard = () => {\n//   const [weatherDataList, setWeatherDataList] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isCelsius, setIsCelsius] = useState([]);\n//   const { t } = useTranslation();\n\n//   useEffect(() => {\n//     const savedCitiesFromLocalStorage = JSON.parse(localStorage.getItem('savedCities')) || [];\n\n//     const fetchData = async () => {\n//       try {\n//         const location = await getCurrentLocation();\n//         const data = await getWeatherGeo(location.lat, location.lon);\n//         setWeatherDataList([data]);\n//         setIsCelsius([true]);\n//         setError(null);\n\n//         const updatedCities = [...new Set([...savedCitiesFromLocalStorage, data.name])];\n//         localStorage.setItem('savedCities', JSON.stringify(updatedCities));\n//       } catch (error) {\n//         console.error('Error getting current location or fetching weather data:', error);\n//         setError('Error fetching weather data.');\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const kelvinToCelsius = (kelvin) => {\n//     return kelvin - 273.15;\n//   };\n\n//   const kelvinToFahrenheit = (kelvin) => {\n//     return (kelvin * 9) / 5 - 459.67;\n//   };\n\n//   const toggleToCelsius = (index) => {\n//     setIsCelsius((prevIsCelsius) => {\n//       const updatedIsCelsius = [...prevIsCelsius];\n//       updatedIsCelsius[index] = true;\n//       return updatedIsCelsius;\n//     });\n//   };\n\n//   const toggleToFahrenheit = (index) => {\n//     setIsCelsius((prevIsCelsius) => {\n//       const updatedIsCelsius = [...prevIsCelsius];\n//       updatedIsCelsius[index] = false;\n//       return updatedIsCelsius;\n//     });\n//   };\n\n//   const handleSearch = async (city) => {\n//     try {\n//       const data = await getWeather(city);\n//       setWeatherDataList([data]);\n//       setIsCelsius([true]);\n//       setError(null);\n\n//       const updatedCities = [...new Set([...JSON.parse(localStorage.getItem('savedCities')) || [], city])];\n//       localStorage.setItem('savedCities', JSON.stringify(updatedCities));\n//     } catch (error) {\n//       setError('Wrong city name.');\n//     }\n//   };\n\n//   const handleRemoveCity = (index) => {\n//     const updatedWeatherDataList = [...weatherDataList];\n//     updatedWeatherDataList.splice(index, 1);\n//     setWeatherDataList(updatedWeatherDataList);\n\n//     const updatedIsCelsius = [...isCelsius];\n//     updatedIsCelsius.splice(index, 1);\n//     setIsCelsius(updatedIsCelsius);\n\n//     const updatedCities = updatedWeatherDataList.map((weatherData) => weatherData.name);\n//     localStorage.setItem('savedCities', JSON.stringify(updatedCities));\n//   };\n\n//   return (\n//     <div>\n//       <SearchBar onSearch={handleSearch} />\n//       {error && <p className={wcss.error} style={{ color: 'red' }}>{error}</p>}\n\n//       {weatherDataList.length > 0 &&\n//         weatherDataList.map((weatherData, index) => (\n//           <div key={index} className={wcss.box}>\n//             <div className={wcss.boxTwo}>\n//               <h2 className={wcss.title}>{weatherData.name}</h2>\n//               <p className={wcss.text}>{new Date(weatherData.dt * 1000).toLocaleString()}</p>\n\n//               <div className={wcss.boxThree}>\n//                 <p className={wcss.textt}>\n//                   {isCelsius[index]\n//                     ? `${kelvinToCelsius(weatherData.main.temp).toFixed(0)} °C`\n//                     : `${kelvinToFahrenheit(weatherData.main.temp).toFixed(0)} °F`}\n//                 </p>\n//               </div>\n\n//               <p className={wcss.text}>\n//                 {t('Feels like')}{' '}\n//                 {isCelsius[index]\n//                   ? `${kelvinToCelsius(weatherData.main.feels_like).toFixed(0)} °C`\n//                   : `${kelvinToFahrenheit(weatherData.main.feels_like).toFixed(0)} °F`}  .\n//                 {weatherData.weather[0].description} .\n//                 {`${t('Wind')}: ${weatherData.wind.speed}`}\n//               </p>\n//               <div className={wcss.boxBtn}>\n//                 <button className={wcss.btngr} onClick={() => toggleToCelsius(index)}>\n//                   °C\n//                 </button>\n//                 <button className={wcss.btngr} onClick={() => toggleToFahrenheit(index)}>\n//                   °F\n//                 </button>\n//               </div>\n//               <div className={wcss.boxForecast}>\n//                 <Forecast city={weatherData.name} />\n//               </div>\n//             </div>\n//             <button className={wcss.bremove} onClick={() => handleRemoveCity(index)}>\n//               {t('Remove')}\n//             </button>\n//             <div className={wcss.boxMap}>\n//               <GoogleMaps\n//                 key={`${weatherData.coord.lat}-${weatherData.coord.lon}`}\n//                 lat={weatherData.coord.lat}\n//                 lng={weatherData.coord.lon}\n//               />\n//             </div>\n//           </div>\n//         ))}\n//     </div>\n//   );\n// };\n\n// export default WeatherCard;\n\nimport React, { useState, useEffect } from 'react';\nimport { getWeather } from '../api/api';\nimport SearchBar from '../searchBar/searchbar';\nimport GoogleMaps from '../map/map';\nimport wcss from './weatherCard.module.css';\nimport Forecast from '../forecast/forecast';\nimport { useTranslation } from 'react-i18next';\nimport { getWeatherGeo, getCurrentLocation } from '../api/apiGeo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherCard = () => {\n  _s();\n  const [weatherDataList, setWeatherDataList] = useState([]);\n  const [error, setError] = useState(null);\n  const [isCelsius, setIsCelsius] = useState([]);\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    const savedCitiesFromLocalStorage = JSON.parse(localStorage.getItem('savedCities')) || [];\n    const fetchData = async () => {\n      try {\n        const location = await getCurrentLocation();\n        const data = await getWeatherGeo(location.lat, location.lon);\n        setWeatherDataList([data]);\n        setIsCelsius([true]);\n        setError(null);\n        const updatedCities = [...new Set([...savedCitiesFromLocalStorage, data.name])];\n        localStorage.setItem('savedCities', JSON.stringify(updatedCities));\n      } catch (error) {\n        console.error('Error getting current location or fetching weather data:', error);\n        setError('Error fetching weather data.');\n      }\n    };\n    fetchData();\n  }, []);\n  const kelvinToCelsius = kelvin => {\n    return kelvin - 273.15;\n  };\n  const kelvinToFahrenheit = kelvin => {\n    return kelvin * 9 / 5 - 459.67;\n  };\n  const toggleToCelsius = index => {\n    setIsCelsius(prevIsCelsius => {\n      const updatedIsCelsius = [...prevIsCelsius];\n      updatedIsCelsius[index] = true;\n      return updatedIsCelsius;\n    });\n  };\n  const toggleToFahrenheit = index => {\n    setIsCelsius(prevIsCelsius => {\n      const updatedIsCelsius = [...prevIsCelsius];\n      updatedIsCelsius[index] = false;\n      return updatedIsCelsius;\n    });\n  };\n  const handleSearch = async city => {\n    try {\n      const data = await getWeather(city);\n      setWeatherDataList([data]);\n      setIsCelsius([true]);\n      setError(null);\n      const updatedCities = [...new Set([...(JSON.parse(localStorage.getItem('savedCities')) || []), city])];\n      localStorage.setItem('savedCities', JSON.stringify(updatedCities));\n    } catch (error) {\n      setError('Wrong city name.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: wcss.error,\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }, this), weatherDataList.length > 0 && weatherDataList.map((weatherData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: wcss.box,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: wcss.boxTwo,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: wcss.title,\n          children: weatherData.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: wcss.text,\n          children: new Date(weatherData.dt * 1000).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: wcss.boxThree,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: wcss.textt,\n            children: isCelsius[index] ? `${kelvinToCelsius(weatherData.main.temp).toFixed(0)} °C` : `${kelvinToFahrenheit(weatherData.main.temp).toFixed(0)} °F`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: wcss.text,\n          children: [t('FeelsLike'), ' ', isCelsius[index] ? `${kelvinToCelsius(weatherData.main.feels_like).toFixed(0)} ${t('Celsius')}` : `${kelvinToFahrenheit(weatherData.main.feels_like).toFixed(0)} ${t('Fahrenheit')}`, \"  .\", weatherData.weather[0].description, \" .\", `${t('Wind')}: ${weatherData.wind.speed}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: wcss.boxBtn,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: wcss.btngr,\n            onClick: () => toggleToCelsius(index),\n            children: \"\\xB0C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: wcss.btngr,\n            onClick: () => toggleToFahrenheit(index),\n            children: \"\\xB0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: wcss.boxForecast,\n          children: /*#__PURE__*/_jsxDEV(Forecast, {\n            city: weatherData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: wcss.boxMap,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          lat: weatherData.coord.lat,\n          lng: weatherData.coord.lon\n        }, `${weatherData.coord.lat}-${weatherData.coord.lon}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherCard, \"R9k6xRNtR2xlWB/tobF9ReJtc2U=\", false, function () {\n  return [useTranslation];\n});\n_c = WeatherCard;\nexport default WeatherCard;\nvar _c;\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"names":["React","useState","useEffect","getWeather","SearchBar","GoogleMaps","wcss","Forecast","useTranslation","getWeatherGeo","getCurrentLocation","jsxDEV","_jsxDEV","WeatherCard","_s","weatherDataList","setWeatherDataList","error","setError","isCelsius","setIsCelsius","t","savedCitiesFromLocalStorage","JSON","parse","localStorage","getItem","fetchData","location","data","lat","lon","updatedCities","Set","name","setItem","stringify","console","kelvinToCelsius","kelvin","kelvinToFahrenheit","toggleToCelsius","index","prevIsCelsius","updatedIsCelsius","toggleToFahrenheit","handleSearch","city","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","className","style","color","length","map","weatherData","box","boxTwo","title","text","Date","dt","toLocaleString","boxThree","textt","main","temp","toFixed","feels_like","weather","description","wind","speed","boxBtn","btngr","onClick","boxForecast","boxMap","coord","lng","_c","$RefreshReg$"],"sources":["C:/Users/38068/Desktop/HTML-CSS-77/WeatherT/src/components/weatherCard/weatherCard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { getWeather } from '../api/api';\r\n// import SearchBar from '../searchBar/searchbar';\r\n// import GoogleMaps from '../map/map';\r\n// import wcss from './weatherCard.module.css';\r\n// import Forecast from '../forecast/forecast';\r\n// import { useTranslation } from 'react-i18next';\r\n// import { getWeatherGeo, getCurrentLocation } from '../api/apiGeo';\r\n\r\n// const WeatherCard = () => {\r\n//   const [weatherDataList, setWeatherDataList] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n//   const [isCelsius, setIsCelsius] = useState([]);\r\n//   const { t } = useTranslation();\r\n\r\n//   useEffect(() => {\r\n//     const savedCitiesFromLocalStorage = JSON.parse(localStorage.getItem('savedCities')) || [];\r\n\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const location = await getCurrentLocation();\r\n//         const data = await getWeatherGeo(location.lat, location.lon);\r\n//         setWeatherDataList([data]);\r\n//         setIsCelsius([true]);\r\n//         setError(null);\r\n\r\n//         const updatedCities = [...new Set([...savedCitiesFromLocalStorage, data.name])];\r\n//         localStorage.setItem('savedCities', JSON.stringify(updatedCities));\r\n//       } catch (error) {\r\n//         console.error('Error getting current location or fetching weather data:', error);\r\n//         setError('Error fetching weather data.');\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n  \r\n//   const kelvinToCelsius = (kelvin) => {\r\n//     return kelvin - 273.15;\r\n//   };\r\n\r\n//   const kelvinToFahrenheit = (kelvin) => {\r\n//     return (kelvin * 9) / 5 - 459.67;\r\n//   };\r\n\r\n//   const toggleToCelsius = (index) => {\r\n//     setIsCelsius((prevIsCelsius) => {\r\n//       const updatedIsCelsius = [...prevIsCelsius];\r\n//       updatedIsCelsius[index] = true;\r\n//       return updatedIsCelsius;\r\n//     });\r\n//   };\r\n\r\n//   const toggleToFahrenheit = (index) => {\r\n//     setIsCelsius((prevIsCelsius) => {\r\n//       const updatedIsCelsius = [...prevIsCelsius];\r\n//       updatedIsCelsius[index] = false;\r\n//       return updatedIsCelsius;\r\n//     });\r\n//   };\r\n\r\n//   const handleSearch = async (city) => {\r\n//     try {\r\n//       const data = await getWeather(city);\r\n//       setWeatherDataList([data]);\r\n//       setIsCelsius([true]);\r\n//       setError(null);\r\n\r\n//       const updatedCities = [...new Set([...JSON.parse(localStorage.getItem('savedCities')) || [], city])];\r\n//       localStorage.setItem('savedCities', JSON.stringify(updatedCities));\r\n//     } catch (error) {\r\n//       setError('Wrong city name.');\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveCity = (index) => {\r\n//     const updatedWeatherDataList = [...weatherDataList];\r\n//     updatedWeatherDataList.splice(index, 1);\r\n//     setWeatherDataList(updatedWeatherDataList);\r\n\r\n//     const updatedIsCelsius = [...isCelsius];\r\n//     updatedIsCelsius.splice(index, 1);\r\n//     setIsCelsius(updatedIsCelsius);\r\n\r\n//     const updatedCities = updatedWeatherDataList.map((weatherData) => weatherData.name);\r\n//     localStorage.setItem('savedCities', JSON.stringify(updatedCities));\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <SearchBar onSearch={handleSearch} />\r\n//       {error && <p className={wcss.error} style={{ color: 'red' }}>{error}</p>}\r\n\r\n//       {weatherDataList.length > 0 &&\r\n//         weatherDataList.map((weatherData, index) => (\r\n//           <div key={index} className={wcss.box}>\r\n//             <div className={wcss.boxTwo}>\r\n//               <h2 className={wcss.title}>{weatherData.name}</h2>\r\n//               <p className={wcss.text}>{new Date(weatherData.dt * 1000).toLocaleString()}</p>\r\n\r\n//               <div className={wcss.boxThree}>\r\n//                 <p className={wcss.textt}>\r\n//                   {isCelsius[index]\r\n//                     ? `${kelvinToCelsius(weatherData.main.temp).toFixed(0)} °C`\r\n//                     : `${kelvinToFahrenheit(weatherData.main.temp).toFixed(0)} °F`}\r\n//                 </p>\r\n//               </div>\r\n\r\n//               <p className={wcss.text}>\r\n//                 {t('Feels like')}{' '}\r\n//                 {isCelsius[index]\r\n//                   ? `${kelvinToCelsius(weatherData.main.feels_like).toFixed(0)} °C`\r\n//                   : `${kelvinToFahrenheit(weatherData.main.feels_like).toFixed(0)} °F`}  .\r\n//                 {weatherData.weather[0].description} .\r\n//                 {`${t('Wind')}: ${weatherData.wind.speed}`}\r\n//               </p>\r\n//               <div className={wcss.boxBtn}>\r\n//                 <button className={wcss.btngr} onClick={() => toggleToCelsius(index)}>\r\n//                   °C\r\n//                 </button>\r\n//                 <button className={wcss.btngr} onClick={() => toggleToFahrenheit(index)}>\r\n//                   °F\r\n//                 </button>\r\n//               </div>\r\n//               <div className={wcss.boxForecast}>\r\n//                 <Forecast city={weatherData.name} />\r\n//               </div>\r\n//             </div>\r\n//             <button className={wcss.bremove} onClick={() => handleRemoveCity(index)}>\r\n//               {t('Remove')}\r\n//             </button>\r\n//             <div className={wcss.boxMap}>\r\n//               <GoogleMaps\r\n//                 key={`${weatherData.coord.lat}-${weatherData.coord.lon}`}\r\n//                 lat={weatherData.coord.lat}\r\n//                 lng={weatherData.coord.lon}\r\n//               />\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WeatherCard;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getWeather } from '../api/api';\r\nimport SearchBar from '../searchBar/searchbar';\r\nimport GoogleMaps from '../map/map';\r\nimport wcss from './weatherCard.module.css';\r\nimport Forecast from '../forecast/forecast';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getWeatherGeo, getCurrentLocation } from '../api/apiGeo';\r\n\r\nconst WeatherCard = () => {\r\n  const [weatherDataList, setWeatherDataList] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isCelsius, setIsCelsius] = useState([]);\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const savedCitiesFromLocalStorage = JSON.parse(localStorage.getItem('savedCities')) || [];\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const location = await getCurrentLocation();\r\n        const data = await getWeatherGeo(location.lat, location.lon);\r\n        setWeatherDataList([data]);\r\n        setIsCelsius([true]);\r\n        setError(null);\r\n\r\n        const updatedCities = [...new Set([...savedCitiesFromLocalStorage, data.name])];\r\n        localStorage.setItem('savedCities', JSON.stringify(updatedCities));\r\n      } catch (error) {\r\n        console.error('Error getting current location or fetching weather data:', error);\r\n        setError('Error fetching weather data.');\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const kelvinToCelsius = (kelvin) => {\r\n    return kelvin - 273.15;\r\n  };\r\n\r\n  const kelvinToFahrenheit = (kelvin) => {\r\n    return (kelvin * 9) / 5 - 459.67;\r\n  };\r\n\r\n  const toggleToCelsius = (index) => {\r\n    setIsCelsius((prevIsCelsius) => {\r\n      const updatedIsCelsius = [...prevIsCelsius];\r\n      updatedIsCelsius[index] = true;\r\n      return updatedIsCelsius;\r\n    });\r\n  };\r\n\r\n  const toggleToFahrenheit = (index) => {\r\n    setIsCelsius((prevIsCelsius) => {\r\n      const updatedIsCelsius = [...prevIsCelsius];\r\n      updatedIsCelsius[index] = false;\r\n      return updatedIsCelsius;\r\n    });\r\n  };\r\n\r\n  const handleSearch = async (city) => {\r\n    try {\r\n      const data = await getWeather(city);\r\n      setWeatherDataList([data]);\r\n      setIsCelsius([true]);\r\n      setError(null);\r\n\r\n      const updatedCities = [...new Set([...JSON.parse(localStorage.getItem('savedCities')) || [], city])];\r\n      localStorage.setItem('savedCities', JSON.stringify(updatedCities));\r\n    } catch (error) {\r\n      setError('Wrong city name.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar onSearch={handleSearch} />\r\n      {error && <p className={wcss.error} style={{ color: 'red' }}>{error}</p>}\r\n\r\n      {weatherDataList.length > 0 &&\r\n        weatherDataList.map((weatherData, index) => (\r\n          <div key={index} className={wcss.box}>\r\n            <div className={wcss.boxTwo}>\r\n              <h2 className={wcss.title}>{weatherData.name}</h2>\r\n              <p className={wcss.text}>{new Date(weatherData.dt * 1000).toLocaleString()}</p>\r\n\r\n              <div className={wcss.boxThree}>\r\n                <p className={wcss.textt}>\r\n                  {isCelsius[index]\r\n                    ? `${kelvinToCelsius(weatherData.main.temp).toFixed(0)} °C`\r\n                    : `${kelvinToFahrenheit(weatherData.main.temp).toFixed(0)} °F`}\r\n                </p>\r\n              </div>\r\n\r\n              <p className={wcss.text}>\r\n                {t('FeelsLike')}{' '}\r\n                {isCelsius[index]\r\n                ? `${kelvinToCelsius(weatherData.main.feels_like).toFixed(0)} ${t('Celsius')}`\r\n                : `${kelvinToFahrenheit(weatherData.main.feels_like).toFixed(0)} ${t('Fahrenheit')}`}  .\r\n                  {weatherData.weather[0].description} .\r\n                  {`${t('Wind')}: ${weatherData.wind.speed}`}\r\n              </p>\r\n              <div className={wcss.boxBtn}>\r\n                <button className={wcss.btngr} onClick={() => toggleToCelsius(index)}>\r\n                  °C\r\n                </button>\r\n                <button className={wcss.btngr} onClick={() => toggleToFahrenheit(index)}>\r\n                  °F\r\n                </button>\r\n              </div>\r\n              <div className={wcss.boxForecast}>\r\n                <Forecast city={weatherData.name} />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className={wcss.boxMap}>\r\n              <GoogleMaps\r\n                key={`${weatherData.coord.lat}-${weatherData.coord.lon}`}\r\n                lat={weatherData.coord.lat}\r\n                lng={weatherData.coord.lon}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;"],"mappings":"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"},"metadata":{},"sourceType":"module"}