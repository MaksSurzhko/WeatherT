{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\38068\\\\Desktop\\\\HTML-CSS-77\\\\WeatherT\\\\src\\\\components\\\\forecast\\\\forecast.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getWeatherForecast } from '../api/apiForecast';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport moment from 'moment';\nimport wcss from '../weatherCard/weatherCard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Forecast = _ref => {\n  _s();\n  let {\n    city\n  } = _ref;\n  const [forecastData, setForecastData] = useState(null);\n  useEffect(() => {\n    const fetchForecastData = async () => {\n      try {\n        const data = await getWeatherForecast(city);\n        setForecastData(data);\n      } catch (error) {\n        console.error('Error fetching forecast data:', error);\n      }\n    };\n    fetchForecastData();\n  }, [city]);\n  const convertKelvinToCelsius = kelvin => (kelvin - 273.15).toFixed(0);\n  const createChartData = () => {\n    if (!forecastData) return [];\n    return forecastData.list.map(entry => ({\n      name: moment.unix(entry.dt).format('YYYY-MM-DD HH:mm:ss'),\n      temperature: convertKelvinToCelsius(entry.main.temp)\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: wcss.boxForecast,\n    children: forecastData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: wcss.foreBoxTwo,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 570,\n        height: 300,\n        data: createChartData(),\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"temperature\",\n          stroke: \"#8884d8\",\n          name: \"Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Forecast, \"GdGwGAc3aRVLQYYssTOULQ2pgt0=\");\n_c = Forecast;\nexport default Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["React","useEffect","useState","getWeatherForecast","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","moment","wcss","jsxDEV","_jsxDEV","Forecast","_ref","_s","city","forecastData","setForecastData","fetchForecastData","data","error","console","convertKelvinToCelsius","kelvin","toFixed","createChartData","list","map","entry","name","unix","dt","format","temperature","main","temp","className","boxForecast","children","foreBoxTwo","width","height","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["C:/Users/38068/Desktop/HTML-CSS-77/WeatherT/src/components/forecast/forecast.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getWeatherForecast } from '../api/apiForecast';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\nimport moment from 'moment';\r\nimport wcss from '../weatherCard/weatherCard.module.css'\r\n\r\nconst Forecast = ({ city }) => {\r\n  const [forecastData, setForecastData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchForecastData = async () => {\r\n      try {\r\n        const data = await getWeatherForecast(city);\r\n        setForecastData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching forecast data:', error);\r\n      }\r\n    };\r\n\r\n    fetchForecastData();\r\n  }, [city]);\r\n\r\n  const convertKelvinToCelsius = kelvin => (kelvin - 273.15).toFixed(0);\r\n\r\n  const createChartData = () => {\r\n    if (!forecastData) return [];\r\n\r\n    return forecastData.list.map(entry => ({\r\n      name: moment.unix(entry.dt).format('YYYY-MM-DD HH:mm:ss'),\r\n      temperature: convertKelvinToCelsius(entry.main.temp),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={wcss.boxForecast}>\r\n      {/* <h2>Weather Forecast for {city}</h2> */}\r\n      {forecastData && (\r\n        <div className={wcss.foreBoxTwo}>\r\n          <LineChart width={570} height={300} data={createChartData()}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" name=\"Temperature\" />\r\n          </LineChart>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;"],"mappings":"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"},"metadata":{},"sourceType":"module"}