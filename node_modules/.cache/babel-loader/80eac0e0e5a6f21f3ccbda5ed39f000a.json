{"ast":null,"code":"import axios from 'axios';\nconst apiKey = \"820290b87322a7c3595da95c899c3746\";\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather';\nconst getWeatherGeo = async (lat, lon) => {\n  try {\n    const response = await axios.get(`${apiUrl}?lat=${lat}&lon=${lon}&appid=${apiKey}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error;\n  }\n};\nexport { getWeatherGeo };\nconst getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        resolve({\n          lat: latitude,\n          lon: longitude\n        });\n      }, error => {\n        reject(error);\n      });\n    } else {\n      reject(new Error('Geolocation is not supported.'));\n    }\n  });\n};\nexport { getCurrentLocation };","map":{"version":3,"names":["axios","apiKey","apiUrl","getWeatherGeo","lat","lon","response","get","data","error","console","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","Error"],"sources":["C:/Users/38068/Desktop/HTML-CSS-77/WeatherT/src/components/api/apiGeo.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n const apiKey = \"820290b87322a7c3595da95c899c3746\";\r\n const apiUrl = 'https://api.openweathermap.org/data/2.5/weather';\r\n\r\nconst getWeatherGeo = async (lat, lon) => {\r\n  try {\r\n    const response = await axios.get(`${apiUrl}?lat=${lat}&lon=${lon}&appid=${apiKey}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching weather data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport { getWeatherGeo };\r\n\r\n\r\nconst getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          resolve({ lat: latitude, lon: longitude });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    } else {\r\n      reject(new Error('Geolocation is not supported.'));\r\n    }\r\n  });\r\n};\r\n\r\nexport { getCurrentLocation };\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAExB,MAAMC,MAAM,GAAG,kCAAkC;AACjD,MAAMC,MAAM,GAAG,iDAAiD;AAEjE,MAAMC,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEL,MAAO,QAAOE,GAAI,QAAOC,GAAI,UAASJ,MAAO,EAAC,CAAC;IACnF,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,SAASN,aAAa;AAGtB,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZ,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;QAC/CR,OAAO,CAAC;UAAET,GAAG,EAAEe,QAAQ;UAAEd,GAAG,EAAEe;QAAU,CAAC,CAAC;MAC5C,CAAC,EACAX,KAAK,IAAK;QACTK,MAAM,CAACL,KAAK,CAAC;MACf,CACF,CAAC;IACH,CAAC,MAAM;MACLK,MAAM,CAAC,IAAIQ,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACpD;EACF,CAAC,CAAC;AACJ,CAAC;AAED,SAASX,kBAAkB"},"metadata":{},"sourceType":"module"}